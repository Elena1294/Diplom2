Index: src/main/java/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/User.java b/src/main/java/User.java
--- a/src/main/java/User.java	
+++ b/src/main/java/User.java	
@@ -1,2 +1,41 @@
-package PACKAGE_NAME;public class User {
+public class User {
+
+    private String email;
+    private String password;
+    private String name;
+
+    public User (String email, String password, String name) {
+        this.email = email;
+        this.password=password;
+        this.name=name;
+    }
+
+    public User (String email, String password) {
+        this.email = email;
+        this.password=password;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
 }
Index: src/test/java/UserRegisterTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/UserRegisterTest.java b/src/test/java/UserRegisterTest.java
--- a/src/test/java/UserRegisterTest.java	
+++ b/src/test/java/UserRegisterTest.java	
@@ -1,2 +1,77 @@
-package PACKAGE_NAME;public class UserRegisterTest {
+import io.qameta.allure.Description;
+import io.qameta.allure.junit4.DisplayName;
+import io.restassured.RestAssured;
+import io.restassured.response.Response;
+import org.hamcrest.MatcherAssert;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import static org.apache.http.HttpStatus.*;
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.CoreMatchers.notNullValue;
+
+public class UserRegisterTest {
+
+    User user = new User(TestDataUser.LOGIN, TestDataUser.PASSWORD, TestDataUser.NAME);
+    UserAPI UserAPI = new UserAPI();
+
+    @Before
+    public void setUp() {
+        RestAssured.baseURI = Endpoints.BASE;
+    }
+
+    @Test
+    @DisplayName("Создание нового пользователя") // имя теста
+    @Description("Проверка того, что пользователь успешно создается") // описание теста
+    public void createNewUserTest() {
+
+        Response response = UserAPI.newUser(user);
+        response.then().statusCode(200);
+        response.then().assertThat().body("success", equalTo(true));
+    }
+
+    @Test
+    @DisplayName("Попытка создания второго одинакового пользователя") // имя теста
+    @Description("Проверка создания второго одинакового пользователя с существующим в базе логином") // описание теста
+    public void createDoubleUserTest() {
+
+        User userDouble = new User(TestDataUser.CREATED_LOGIN, TestDataUser.CREATED_PASSWORD, TestDataUser.CREATED_NAME);
+        Response response = UserAPI.newUser(userDouble);
+        response.then().assertThat()
+                .statusCode(403)
+                .and()
+                .body("message", equalTo("User already exists"));
+    }
+
+    @Test
+    @DisplayName("Попытка создания юзера без логина") // имя теста
+    @Description("Проверка создания юзера без логина") // описание теста
+    public void createUserWithOutLoginTest() {
+
+        User UserWithOutLogin = new User("", TestDataUser.PASSWORD, TestDataUser.NAME);
+        Response response = UserAPI.newUser(UserWithOutLogin);
+        response.then().assertThat()
+                .statusCode(403)
+                .and()
+                .body("message", equalTo("Email, password and name are required fields"));
+    }
+    @Test
+    @DisplayName("Попытка создания юзера без пароля") // имя теста
+    @Description("Проверка создания юзера без пароля") // описание теста
+    public void createUserWithOutPasswordTest() {
+
+        User UserWithOutPassword = new User(TestDataUser.LOGIN, "", TestDataUser.NAME);
+        Response response = UserAPI.newUser(UserWithOutPassword);
+        response.then().assertThat()
+                .statusCode(403)
+                .and()
+                .body("message", equalTo("Email, password and name are required fields"));
+    }
+
+    @After
+    public void cleanUp(){
+
+        UserAPI.deleteUser(user);
+
+    }
 }
Index: src/main/java/Endpoints.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Endpoints.java b/src/main/java/Endpoints.java
--- a/src/main/java/Endpoints.java	
+++ b/src/main/java/Endpoints.java	
@@ -1,2 +1,24 @@
-package PACKAGE_NAME;public class Endpoints {
+
+import io.restassured.builder.RequestSpecBuilder;
+import io.restassured.specification.RequestSpecification;
+import static io.restassured.http.ContentType.JSON;
+
+public class Endpoints {
+    public static final String BASE = "https://stellarburgers.nomoreparties.site";
+    public static final String API_CREATE = "/api/auth/register";
+    public static final String API_LOGIN = "/api/auth/login";
+    public static final String API_DELETE = "/api/auth/user";
+
+    public static final String API_ORDERS = "/api/orders/all"; //получить все заказы
+    public static final String ORDER_PATH = "/api/orders/";
+
+    public static final String USER_PATH = "/api/auth/";
+    public static final String INGREDIENTS_PATH = "/api/ingredients/";
+
+    protected static RequestSpecification getBaseSpec() {
+        return new RequestSpecBuilder()
+                .setContentType(JSON)
+                .setBaseUri(BASE)
+                .build();
+    }
 }
Index: src/test/java/UpdateUserTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/UpdateUserTest.java b/src/test/java/UpdateUserTest.java
--- a/src/test/java/UpdateUserTest.java	
+++ b/src/test/java/UpdateUserTest.java	
@@ -1,2 +1,53 @@
-package PACKAGE_NAME;public class UpdateUserTest {
+import io.qameta.allure.Description;
+import io.qameta.allure.junit4.DisplayName;
+import io.restassured.RestAssured;
+import io.restassured.response.Response;
+import io.restassured.response.ValidatableResponse;
+import org.apache.commons.lang3.StringUtils;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import static org.apache.http.HttpStatus.SC_OK;
+import static org.apache.http.HttpStatus.SC_UNAUTHORIZED;
+import static org.junit.Assert.*;
+
+public class UpdateUserTest {
+    UserAPI UserAPI = new UserAPI();
+    User userValid = new User(TestDataUser.LOGIN, TestDataUser.PASSWORD, TestDataUser.NAME);
+    private String accessToken;
+
+    @Before
+    public void setUp() {
+        RestAssured.baseURI = Endpoints.BASE;
+
+    }
+    @After
+    public void clearState() {
+        UserAPI.deleteUser(StringUtils.substringAfter(accessToken, " "));
+    }
+
+    @Test
+    @DisplayName("Изменение данных пользователя")
+    @Description("Данные успешно изменены код ответа 200")
+    public void updateDataUserTest(){
+        UserAPI.newUser(userValid);
+        Response response = UserAPI.loginUser(userValid);
+        accessToken = response.then().extract().path("accessToken");
+        ValidatableResponse responseUpd =  UserAPI.updateUserWithAuth(userValid, accessToken);
+        int statusCode = responseUpd.extract().statusCode();
+        boolean isChange = responseUpd.extract().path("success");
+        assertEquals(SC_OK, statusCode);
+        assertTrue(isChange);
+        UserAPI.deleteUser(StringUtils.substringAfter(accessToken, " "));
+    }
+    @Test
+    @DisplayName("Изменение данных пользователя без авторизации")
+    @Description("Ошибка 401")
+    public void updateDataUserWithoutAuthTest(){
+        ValidatableResponse response = UserAPI.updateUserWithoutAuth(userValid);
+        int statusCode = response.extract().statusCode();
+        boolean isDataNotChange = response.extract().path("success");
+        assertEquals(SC_UNAUTHORIZED, statusCode);
+        assertFalse(isDataNotChange);
+    }
 }
Index: src/main/java/TestDataUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/TestDataUser.java b/src/main/java/TestDataUser.java
--- a/src/main/java/TestDataUser.java	
+++ b/src/main/java/TestDataUser.java	
@@ -1,2 +1,8 @@
-package PACKAGE_NAME;public class TestDataUser {
+public class TestDataUser {
+    public static final String LOGIN = "NewUser1@mail.ru";
+    public static final String PASSWORD = "NewPass123";
+    public static final String NAME = "NewName";
+    public static final String CREATED_LOGIN = "helena.bohn@yandex.ru";
+    public static final String CREATED_PASSWORD = "200912";
+    public static final String CREATED_NAME = "Elena";
 }
Index: src/test/java/CreateOrderTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/CreateOrderTest.java b/src/test/java/CreateOrderTest.java
--- a/src/test/java/CreateOrderTest.java	
+++ b/src/test/java/CreateOrderTest.java	
@@ -1,2 +1,86 @@
-package PACKAGE_NAME;public class CreateOrderTest {
+import io.restassured.RestAssured;
+import io.restassured.response.Response;
+import io.restassured.response.ValidatableResponse;
+import org.junit.Before;
+import io.qameta.allure.Description;
+import io.qameta.allure.junit4.DisplayName;
+import org.apache.commons.lang3.StringUtils;
+import org.junit.Test;
+import java.util.List;
+import static org.apache.http.HttpStatus.*;
+import static org.junit.Assert.*;
+
+public class CreateOrderTest {
+    private ValidatableResponse validatableResponse;
+    private String accessToken;
+
+    UserAPI userAPI = new UserAPI();
+    OrderAPI orderAPI = new OrderAPI();
+    User userValid = new User(TestDataUser.CREATED_LOGIN, TestDataUser.CREATED_PASSWORD);
+    Order order = new Order();
+
+    @Before
+    public void setUp() {
+        RestAssured.baseURI = Endpoints.BASE;
+    }
+
+    @Test
+    @DisplayName("Создание заказа после авторизации пользователя")
+    @Description("Заказ создан, код ответа 200")
+    public void orderCreateWithAuthTest(){
+        fillListIngredients();
+        Response response = UserAPI.loginUser(userValid);
+        accessToken = response.then().extract().path("accessToken");
+        validatableResponse = orderAPI.orderCreate(order,accessToken);
+        int statusCode = validatableResponse.extract().statusCode();
+        boolean isCreate = validatableResponse.extract().path("success");
+        assertEquals(SC_OK, statusCode);
+        assertTrue(isCreate);
+    }
+
+
+    @Test
+    @DisplayName("Создание заказа без авторизации пользователя")
+    @Description("Заказ создан, код ответа 200")
+    public void orderCreateWithoutAuthorization(){
+        fillListIngredients();
+        validatableResponse = orderAPI.createOrderWithoutAuthorization(order);
+        int statusCode = validatableResponse.extract().statusCode();
+        boolean isCreate = validatableResponse.extract().path("success");
+        assertEquals(SC_OK, statusCode);
+        assertTrue(isCreate);
+    }
+    @Test
+    @DisplayName("Создание заказа без авторизации пользователя и без ингредиентов")
+    @Description("Ошибка 400")
+    public void orderCreateWithoutAuthorizationAndIngredients(){
+        validatableResponse = orderAPI.createOrderWithoutAuthorization(order);
+        int statusCode = validatableResponse.extract().statusCode();
+        boolean isCreate = validatableResponse.extract().path("success");
+        assertEquals(SC_BAD_REQUEST, statusCode);
+        assertFalse(isCreate);
+    }
+
+    @Test
+    @DisplayName("Создние заказа без авторизации пользователя и с неверным хешом ингредиентов")
+    @Description("Ошибка 500")
+    public void orderCreateWithoutAuthorizationAndWrongHashIngredient(){
+        validatableResponse = userAPI.getAllIngredients();
+        List<String> list = validatableResponse.extract().path("data._id");
+        List<String> ingredients = order.getIngredients();
+        ingredients.add(list.get(0));
+        ingredients.add(list.get(5).replaceAll("a", "l"));
+        ingredients.add(list.get(0));
+        validatableResponse = orderAPI.createOrderWithoutAuthorization(order);
+        int statusCode = validatableResponse.extract().statusCode();
+        assertEquals(SC_INTERNAL_SERVER_ERROR, statusCode);
+    }
+    private void fillListIngredients() {
+        validatableResponse = userAPI.getAllIngredients();
+        List<String> list = validatableResponse.extract().path("data._id");
+        List<String> ingredients = order.getIngredients();
+        ingredients.add(list.get(0));
+        ingredients.add(list.get(5));
+        ingredients.add(list.get(0));
+    }
 }
Index: src/main/java/Order.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Order.java b/src/main/java/Order.java
--- a/src/main/java/Order.java	
+++ b/src/main/java/Order.java	
@@ -1,2 +1,21 @@
-package PACKAGE_NAME;public class Order {
+
+
+import java.util.List;
+import java.util.ArrayList;
+public class Order {
+
+    private List<String> ingredients;
+    public Order(List<String> ingredients) {
+        this.ingredients = ingredients;
+    }
+    public Order() {
+        ingredients = new ArrayList<>();
+    }
+    public List<String> getIngredients() {
+        return ingredients;
+    }
+    public void setIngredients(List<String> ingredients) {
+        this.ingredients = ingredients;
+
+    }
 }
Index: src/main/java/OrderAPI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/OrderAPI.java b/src/main/java/OrderAPI.java
--- a/src/main/java/OrderAPI.java	
+++ b/src/main/java/OrderAPI.java	
@@ -1,2 +1,43 @@
-package PACKAGE_NAME;public class OrderAPI {
+
+import io.restassured.response.ValidatableResponse;
+
+import static io.restassured.RestAssured.given;
+public class OrderAPI {
+
+    public ValidatableResponse orderCreate(Order order, String accessToken) {
+        return given()
+                .spec(Endpoints.getBaseSpec())
+                .header("Authorization", accessToken)
+                .body(order)
+                .log().all()
+                .post(Endpoints.ORDER_PATH)
+                .then()
+                .log().all();
+    }
+    public ValidatableResponse createOrderWithoutAuthorization(Order order) {
+        return given()
+                .spec(Endpoints.getBaseSpec())
+                .body(order)
+                .log().all()
+                .post(Endpoints.ORDER_PATH)
+                .then()
+                .log().all();
+    }
+    public ValidatableResponse getOrdersByAuth(String accessToken) {
+        return given()
+                .spec(Endpoints.getBaseSpec())
+                .header("Authorization", accessToken)
+                .log().all()
+                .get(Endpoints.ORDER_PATH)
+                .then()
+                .log().all();
+    }
+    public ValidatableResponse getOrdersWithoutAuth() {
+        return given()
+                .spec(Endpoints.getBaseSpec())
+                .log().all()
+                .get(Endpoints.ORDER_PATH)
+                .then()
+                .log().all();
+    }
 }
Index: src/test/java/UserLoginTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/UserLoginTest.java b/src/test/java/UserLoginTest.java
--- a/src/test/java/UserLoginTest.java	
+++ b/src/test/java/UserLoginTest.java	
@@ -1,2 +1,55 @@
-package PACKAGE_NAME;public class UserLoginTest {
+import io.qameta.allure.Description;
+import io.qameta.allure.junit4.DisplayName;
+import io.restassured.RestAssured;
+import io.restassured.response.Response;
+import org.hamcrest.MatcherAssert;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import static org.apache.http.HttpStatus.*;
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.CoreMatchers.notNullValue;
+public class UserLoginTest {
+
+    UserAPI UserAPI = new UserAPI();
+
+    @Before
+    public void setUp() {
+        RestAssured.baseURI = Endpoints.BASE;
+    }
+
+    @Test
+    @DisplayName("Успешная авторизация") // имя теста
+    @Description("Успешная авторизация с существующей парой логин/пароль") // описание теста
+    public void checkSuccessfulLoginTest() {
+        User userValid = new User(TestDataUser.CREATED_LOGIN, TestDataUser.CREATED_PASSWORD);
+        Response response = UserAPI.loginUser(userValid);
+        response.then().statusCode(SC_OK);
+        response.then().assertThat().body("success", equalTo(true));
+    }
+
+    @Test
+    @DisplayName("Попытка авторизации юзера с некорректным логином") // имя теста
+    @Description("Проверка создания юзера без логина") // описание теста
+    public void loginUserWithIncorrectLoginTest() {
+
+        User UserWithOutLogin = new User("gg@mail.ru", TestDataUser.PASSWORD, TestDataUser.NAME);
+        Response response = UserAPI.loginUser(UserWithOutLogin);
+        response.then().assertThat()
+                .statusCode(401)
+                .and()
+                .body("message", equalTo("email or password are incorrect"));
+    }
+    @Test
+    @DisplayName("Попытка авторизации юзера с некорректным паролем") // имя теста
+    @Description("Проверка создания юзера без пароля") // описание теста
+    public void loginUserWithIncorrectPasswordTest() {
+
+        User UserWithOutPassword = new User(TestDataUser.LOGIN, "1111", TestDataUser.NAME);
+        Response response = UserAPI.loginUser(UserWithOutPassword);
+        response.then().assertThat()
+                .statusCode(401)
+                .and()
+                .body("message", equalTo("email or password are incorrect"));
+    }
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,7 +4,21 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="f65e7989-7d8d-4b5c-9a7f-bdd97744969c" name="Changes" comment="" />
+    <list default="true" id="f65e7989-7d8d-4b5c-9a7f-bdd97744969c" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Endpoints.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Endpoints.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Order.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Order.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/OrderAPI.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/OrderAPI.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/TestDataUser.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/TestDataUser.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/User.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/UserAPI.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/UserAPI.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/CreateOrderTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/CreateOrderTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/OrderTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/OrderTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/UpdateUserTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/UpdateUserTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/UserLoginTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/UserLoginTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/UserRegisterTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/UserRegisterTest.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -13,6 +27,9 @@
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
+  <component name="MarkdownSettingsMigration">
+    <option name="stateVersion" value="1" />
+  </component>
   <component name="ProjectId" id="2MJgkV6GwR7dmzrPMEaCsbemI1S" />
   <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
   <component name="ProjectViewState">
@@ -22,7 +39,8 @@
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
     "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true"
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "last_opened_file_path": "C:/Program Files/Git/Diplom_1"
   }
 }]]></component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
Index: src/test/java/OrderTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/OrderTest.java b/src/test/java/OrderTest.java
--- a/src/test/java/OrderTest.java	
+++ b/src/test/java/OrderTest.java	
@@ -1,2 +1,49 @@
-package PACKAGE_NAME;public class OrderTest {
+import io.qameta.allure.Description;
+import io.qameta.allure.junit4.DisplayName;
+import io.restassured.RestAssured;
+import io.restassured.response.Response;
+import io.restassured.response.ValidatableResponse;
+import org.apache.commons.lang3.StringUtils;
+import org.junit.Before;
+import org.junit.Test;
+import static org.apache.http.HttpStatus.SC_OK;
+import static org.apache.http.HttpStatus.SC_UNAUTHORIZED;
+import static org.junit.Assert.*;
+public class OrderTest {
+
+    private String accessToken;
+    UserAPI UserAPI = new UserAPI();
+    OrderAPI OrderAPI = new OrderAPI();
+    User userValid = new User(TestDataUser.CREATED_LOGIN, TestDataUser.CREATED_PASSWORD);
+    Order order = new Order();
+
+    @Before
+    public void setUp() {
+        RestAssured.baseURI = Endpoints.BASE;
+    }
+    @Test
+    @DisplayName("Получение заказов авторизованного пользователя")
+    @Description("Приходит список заказов, код ответа 200")
+    public void getOrdersWithAuthTest() {
+
+        Response response = UserAPI.loginUser(userValid);
+        accessToken = response.then().extract().path("accessToken");
+        ValidatableResponse validatableResponse = OrderAPI.getOrdersByAuth(accessToken);
+        int statusCode = validatableResponse.extract().statusCode();
+        boolean isGet = validatableResponse.extract().path("success");
+        assertEquals(SC_OK, statusCode);
+        assertTrue(isGet);
+    }
+    @Test
+    @DisplayName("Получение заказов неавторизованного пользователя")
+    @Description("Код ошибки 401")
+    public void getOrdersWithoutAuthTest(){
+        OrderAPI.createOrderWithoutAuthorization(order);
+        ValidatableResponse response = OrderAPI.getOrdersWithoutAuth();
+        int statusCode = response.extract().statusCode();
+        boolean isGet = response.extract().path("success");
+        assertEquals(SC_UNAUTHORIZED, statusCode);
+        assertFalse(isGet);
+
+    }
 }
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	
+++ b/pom.xml	
@@ -8,10 +8,104 @@
     <artifactId>Diplom_2</artifactId>
     <version>1.0-SNAPSHOT</version>
 
+    <dependencies>
+        <dependency>
+            <groupId>io.rest-assured</groupId>
+            <artifactId>rest-assured</artifactId>
+            <version>4.4.0</version>
+        </dependency>
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <version>4.13.2</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>com.google.code.gson</groupId>
+            <artifactId>gson</artifactId>
+            <version>2.8.9</version>
+        </dependency>
+        <!-- модуль взаимодействия Allure и Junit -->
+        <dependency>
+            <groupId>io.qameta.allure</groupId>
+            <artifactId>allure-junit4</artifactId>
+            <version>${allure.version}</version>
+        </dependency>
+        <dependency>
+            <!-- модуль взаимодействия Allure и RestAssured -->
+            <groupId>io.qameta.allure</groupId>
+            <artifactId>allure-rest-assured</artifactId>
+            <version>${allure.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.aspectj</groupId>
+            <artifactId>aspectjweaver</artifactId>
+            <version>${aspectj.version}</version>
+        </dependency>
+    </dependencies>
+
     <properties>
         <maven.compiler.source>11</maven.compiler.source>
         <maven.compiler.target>11</maven.compiler.target>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+        <!-- версия Aspectj -->
+        <aspectj.version>1.9.7</aspectj.version>
+        <!-- версия Allure -->
+        <allure.version>2.15.0</allure.version>
     </properties>
+
+
+    <build>
+        <pluginManagement>
+            <plugins>
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-surefire-plugin</artifactId>
+                    <version>2.22.2</version>
+                </plugin>
+                <plugin>
+                    <!-- настройка плагина maven-surefire-plugin -->
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-surefire-plugin</artifactId>
+                    <version>2.22.2</version>
+                    <configuration>
+                        <testFailureIgnore>false</testFailureIgnore>
+                        <argLine>
+                            -javaagent:"${settings.localRepository}/org/aspectj/aspectjweaver/${aspectj.version}/aspectjweaver-${aspectj.version}.jar"
+                        </argLine>
+                        <properties>
+                            <property>
+                                <name>listener</name>
+                                <value>io.qameta.allure.junit4.AllureJunit4</value>
+                            </property>
+                        </properties>
+                        <systemProperties>
+                            <property>
+                                <!-- папка, в которую будут генерироваться отчёты Allure -->
+                                <name>allure.results.directory</name>
+                                <value>${project.build.directory}/allure-results</value>
+                            </property>
+                        </systemProperties>
+                    </configuration>
+                    <dependencies>
+                        <dependency>
+                            <groupId>org.aspectj</groupId>
+                            <artifactId>aspectjweaver</artifactId>
+                            <version>${aspectj.version}</version>
+                        </dependency>
+                    </dependencies>
+                </plugin>
+                <!-- подключение плагина allure-maven для вызова функций Allure с помощью Maven -->
+                <plugin>
+                    <groupId>io.qameta.allure</groupId>
+                    <artifactId>allure-maven</artifactId>
+                    <version>2.10.0</version>
+                    <configuration>
+                        <reportVersion>2.15.0</reportVersion>
+                    </configuration>
+                </plugin>
+            </plugins>
+        </pluginManagement>
+    </build>
     
 </project>
\ No newline at end of file
